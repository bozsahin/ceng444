program     -> spec* EOF 

spec        -> declaration 
             | free-statement
             
declaration -> varDecl
             | funDecl
             
free-stament-> (expression | printStmt | ifStmt | whileStmt | forStmt | returnStmt) ";"

stament     -> free-statement
             | block

forStmt     -> "for" "(" ( varDecl | expression | ";" ) expression? ";" expression? ")" statement 
returnStmt  -> "return" expression? 
whileStmt   -> "while" "(" expression ")" statement 
block       -> "{" varDecl* statement* "}" 
printStmt   -> "print" expression
ifStmt      -> ifthenStmt | ifelseStmt
ifthenStmt  -> "if" "(" expression ")" statement 
ifelseStmt  -> "iff" "(" expression ")" statement "else" statement

funDecl     -> "fun" function 
varDecl     -> "var" IDENTIFIER ( "=" expression ("," expression)? )? ";" 

expression  -> assignment 
              | vec
              
vec         -> IDENTIFIER "[" index "]"
assignment  -> IDENTIFIER "=" assignment | logic_or 
logic_or    -> logic_and ( "or" logic_and )* 
logic_and   -> equality ( "and" equality )* 
equality    -> comparison ( ("!="|"==") comparison )* 
comparison  -> addition ( (">"|">="|"<"|"<=") addition )* 
addition    -> multiplication ( ("-"|"+") multiplication )* 
multiplication 
            -> unary ( ("/"|"*") unary )* 
unary       -> ("!"|"-") unary | call 
call        -> primary ( "(" arguments? ")" )?
primary     -> NUMBER | STRING | "false" | "true" | "nil" | "(" expression ")" 
    	    | IDENTIFIER ( "[" index "]" )? 
            
index       -> addition 
            | INT

arguments   -> expression ( "," expression )* 
function    -> IDENTIFIER "(" parameters? ")" block 
parameters  -> IDENTIFIER ( "," IDENTIFIER )* 
